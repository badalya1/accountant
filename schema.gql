type CategoryMutation {
  update(categoryId: ID!, value: UpdateCategoryInput!): Category!
}

type AccountQuery {
  list: [Account!]!
}

type Mutation {
  accounts: AccountMutation!
  currencies: CurrencyMutation!
  categories: CategoryMutation!
  settings: SettingsMutation!
  transactions: TransactionMutation!
}

type SettingsQuery {
  list: [Settings!]!
  get(key: SettingKey!): Settings!
}

type Category {
  id: ID!
  name: String!
  children: [Category!]!
}

type Currency {
  id: ID!
  name: String!
  code: String!
  symbol: String
  numericCode: Int!
  digits: Int!
  selected: Boolean!
  rate: CalculatedRate
}

type DebitTransaction {
  id: ID!
  date: String!
  amount: Float!
  description: String
  toAccount: Account!
}

type CreditTransaction {
  id: ID!
  date: String!
  amount: Float!
  description: String
  fromAccount: Account!
}

type CurrencyMutation {
  setSelected(currencyId: ID!, value: Boolean!): Currency!
}

enum AccountType {
  VAULT
  CREDIT
  LOAN
  PROMISE
}

type SettingsMutation {
  set(key: SettingKey!, value: Json!): Settings!
}

type Query {
  apiVersion: String!
  accounts: AccountQuery!
  currencies: CurrencyQuery!
  categories: CategoryQuery!
  settings: SettingsQuery!
  transactions: TransactionQuery!
}

scalar Json

type ConversionNode {
  currency: Currency!
  inverted: Boolean!
}

enum SettingKey {
  THEME
  MAIN_CURRENCY
}

type TransactionMutation {
  create(data: NewTransactionInput!): Transaction!
}

type AccountMutation {
  create(data: NewAccountInput!): Account!
}

input NewTransactionInput {
  type: TransactionType!
  date: String!
  amount: Float!
  description: String!
  accountId: ID!
  categoryId: ID!
}

type CategoryQuery {
  list: [Category!]!
}

type TransactionQuery {
  list: [Transaction!]!
}

enum TransactionType {
  INCOME
  EXPENSE
}

input UpdateCategoryInput {
  name: String
  icon: String
  description: String
}

input NewAccountInput {
  name: String!
  currencyId: ID!
  accountType: AccountType!
  icon: String
}

type CalculatedRate {
  rate: Float!
  path: [ConversionNode!]!
}

type Settings {
  id: ID!
  key: SettingKey!
  value: Json!
}

union Transaction = DebitTransaction | CreditTransaction

type Account {
  id: ID!
  name: String!
  kind: AccountType!
  currency: Currency!
}

type CurrencyQuery {
  list: [Currency!]!
}

schema {
  query: Query
  mutation: Mutation
}

