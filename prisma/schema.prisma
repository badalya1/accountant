datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

generator client {
    // Corresponds to the cargo alias created earlier
    provider = "cargo prisma"
    // The location to generate the client. Is relative to the position of the schema
    output   = "../src/prisma.rs"
}

model User {
    id          String @id @default(cuid())
    displayName String
}

model Account {
    id          String        @id @default(cuid())
    name        String
    icon        String?
    currencyId  Int
    currency    Currency      @relation(fields: [currencyId], references: [id])
    accountType String
    Transaction Transaction[]
}

model Currency {
    id           Int            @id @default(autoincrement())
    name         String
    code         String
    symbol       String?
    numeric_code Int
    digits       Int            @default(2)
    convertTo    ExchangeRate[] @relation(name: "from")
    convertFrom  ExchangeRate[] @relation(name: "to")
    Account      Account[]
}

model ExchangeRate {
    id     Int      @id @default(autoincrement())
    fromId Int
    from   Currency @relation("from", fields: [fromId], references: [id])
    toId   Int
    to     Currency @relation("to", fields: [toId], references: [id])
    rate   Float

    @@index([fromId, toId])
}

model Transaction {
    id String @id @default(cuid())

    accountId       String
    target          Account   @relation(fields: [accountId], references: [id])
    amount          Float
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    notes           String?
    debitTransfers  Transfer? @relation(name: "debitTransaction")
    creditTransfers Transfer? @relation(name: "creditTransaction")
}

//Transfer consists of two Transactions, one debit and one creit
model Transfer {
    id                  String      @id @default(cuid())
    debitTransactionId  String      @unique
    creditTransactionId String      @unique
    debitTransaction    Transaction @relation("debitTransaction", fields: [debitTransactionId], references: [id])
    creditTransaction   Transaction @relation("creditTransaction", fields: [debitTransactionId], references: [id])
}
